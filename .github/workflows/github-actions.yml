name: Build resources container

on: [push, pull_request]

jobs:
  push_image:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build image
        run: |
          for NAME in $(ls ./src);
          do
            if ! [[ $NAME = "resources" ]]; then
              docker build . --file Dockerfile --tag ${NAME} --label "runnumber=${GITHUB_RUN_ID}" \
              --build-arg SRC_PATH="./src/${NAME}" \
              --build-arg APP_PATH="./${NAME}" \
              --build-arg ASGI_APP="${NAME}.app:app" \
              --build-arg TEST_NAME="test_${NAME}.py";
            fi
          done

      - name: Tests
        run: |
          for NAME in $(ls ./src);
          do
            if ! [[ $NAME = "resources" ]]; then
              docker run -i $NAME /bin/bash -c "coverage run -m pytest > /dev/null && coverage report" > ${NAME}_coverage.txt;
            fi
          done

      - name: Save reports
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: code-coverage-report
          path: ./*_coverage.txt

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          for NAME in $(ls ./src);
          do
            if ! [[ $NAME = "resources" ]]; then
              IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${NAME}

              # Change all uppercase to lowercase
              IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
              # Strip git ref prefix from version
              VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
              # Strip "v" prefix from tag name
              [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
              # Use Docker `latest` tag convention
              [ "$VERSION" == "main" ] && VERSION=latest
              echo IMAGE_ID=$IMAGE_ID
              echo VERSION=$VERSION
              docker tag ${NAME} $IMAGE_ID:$VERSION
              docker push $IMAGE_ID:$VERSION
            fi
          done
